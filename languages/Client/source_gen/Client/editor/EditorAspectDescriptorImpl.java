package Client.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new ActionOperation_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Card_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Client_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new ClientConfig_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new CrudAction_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Form_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Image_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Input_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Link_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new Page_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Text_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Title_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_0(String editorComponentId) {
    if ("Client.editor.ClientTypeComponent".equals(editorComponentId)) {
      return Collections.singletonList(new ClientTypeComponent());
    }
    return Collections.emptyList();
  }
  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return getDeclaredEC_0(editorComponentId);
      default:
    }
    return Collections.emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new ActionOperationReference_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new ClientReference_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new PageReference_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x48e57d507e0f4c8fL, 0x93fc859018228309L, 0xcc684dcdf8dce3bL), MetaIdFactory.conceptId(0x48e57d507e0f4c8fL, 0x93fc859018228309L, 0xa80655405656aa0L), MetaIdFactory.conceptId(0x48e57d507e0f4c8fL, 0x93fc859018228309L, 0xa806554051c0e0eL), MetaIdFactory.conceptId(0x48e57d507e0f4c8fL, 0x93fc859018228309L, 0x56a8c307f66dc0c2L), MetaIdFactory.conceptId(0x48e57d507e0f4c8fL, 0x93fc859018228309L, 0x7ca1de70bb9a32c7L), MetaIdFactory.conceptId(0x48e57d507e0f4c8fL, 0x93fc859018228309L, 0x3094cc14a950da52L), MetaIdFactory.conceptId(0x48e57d507e0f4c8fL, 0x93fc859018228309L, 0xa806554059973baL), MetaIdFactory.conceptId(0x48e57d507e0f4c8fL, 0x93fc859018228309L, 0x3094cc14a950da53L), MetaIdFactory.conceptId(0x48e57d507e0f4c8fL, 0x93fc859018228309L, 0xa806554058d4e4aL), MetaIdFactory.conceptId(0x48e57d507e0f4c8fL, 0x93fc859018228309L, 0x6f7d3aaeb103b898L), MetaIdFactory.conceptId(0x48e57d507e0f4c8fL, 0x93fc859018228309L, 0xa806554059ff916L), MetaIdFactory.conceptId(0x48e57d507e0f4c8fL, 0x93fc859018228309L, 0xa8065540571b850L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x48e57d507e0f4c8fL, 0x93fc859018228309L, 0x6f7d3aaeb0cb4634L)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x48e57d507e0f4c8fL, 0x93fc859018228309L, 0x7ca1de70bb9a32e6L), MetaIdFactory.conceptId(0x48e57d507e0f4c8fL, 0x93fc859018228309L, 0xa8065540525534dL), MetaIdFactory.conceptId(0x48e57d507e0f4c8fL, 0x93fc859018228309L, 0xa806554051c0e24L)).seal();
}
